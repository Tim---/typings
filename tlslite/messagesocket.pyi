from .constants import ContentType as ContentType
from .messages import Message as Message, RecordHeader3 as RecordHeader3
from .recordlayer import RecordLayer as RecordLayer
from .utils.codec import Parser as Parser
from _typeshed import Incomplete
from collections.abc import Generator

class MessageSocket(RecordLayer):
    defragmenter: Incomplete
    unfragmentedDataTypes: Incomplete
    recordSize: Incomplete
    def __init__(self, sock, defragmenter) -> None: ...
    def recvMessage(self) -> Generator[Incomplete]: ...
    def recvMessageBlocking(self): ...
    def flush(self) -> Generator[Incomplete]: ...
    def flushBlocking(self) -> None: ...
    def queueMessage(self, msg) -> Generator[Incomplete]: ...
    def queueMessageBlocking(self, msg) -> None: ...
    def sendMessage(self, msg) -> Generator[Incomplete]: ...
    def sendMessageBlocking(self, msg) -> None: ...
