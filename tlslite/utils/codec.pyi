from .compat import bytes_to_int as bytes_to_int
from _typeshed import Incomplete

class DecodeError(SyntaxError): ...
class BadCertificateError(SyntaxError): ...

class Writer:
    bytes: Incomplete
    def __init__(self) -> None: ...
    def addOne(self, val) -> None: ...
    def addTwo(self, val) -> None: ...
    def addThree(self, val) -> None: ...
    def addFour(self, val) -> None: ...
    def add(self, x, length) -> None: ...
    def addFixSeq(self, seq, length) -> None: ...
    def addVarSeq(self, seq, length, lengthLength) -> None: ...
    def addVarTupleSeq(self, seq, length, lengthLength) -> None: ...
    def add_var_bytes(self, data, length_length) -> None: ...

class Parser:
    bytes: Incomplete
    index: int
    indexCheck: int
    lengthCheck: int
    def __init__(self, bytes) -> None: ...
    def get(self, length): ...
    def getFixBytes(self, lengthBytes): ...
    def skip_bytes(self, length) -> None: ...
    def getVarBytes(self, lengthLength): ...
    def getFixList(self, length, lengthList): ...
    def getVarList(self, length, lengthLength): ...
    def getVarTupleList(self, elemLength, elemNum, lengthLength): ...
    def startLengthCheck(self, lengthLength) -> None: ...
    def setLengthCheck(self, length) -> None: ...
    def stopLengthCheck(self) -> None: ...
    def atLengthCheck(self): ...
    def getRemainingLength(self): ...
