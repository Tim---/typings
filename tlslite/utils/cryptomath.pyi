from .codec import Writer as Writer
from .compat import (
    bit_length as bit_length,
    byte_length as byte_length,
    bytes_to_int as bytes_to_int,
    compat26Str as compat26Str,
    compatHMAC as compatHMAC,
    compatLong as compatLong,
    int_to_bytes as int_to_bytes,
)
from _typeshed import Incomplete

m2cryptoLoaded: bool
M2CRYPTO_AES_CTR: bool
gmpyLoaded: bool
GMPY2_LOADED: bool
pycryptoLoaded: bool

def getRandomBytes(howMany): ...

prngName: str

def MD5(b): ...
def SHA1(b): ...
def secureHash(data, algorithm): ...
def secureHMAC(k, b, algorithm): ...
def HMAC_MD5(k, b): ...
def HMAC_SHA1(k, b): ...
def HMAC_SHA256(k, b): ...
def HMAC_SHA384(k, b): ...
def HKDF_expand(PRK, info, L, algorithm): ...
def HKDF_expand_label(secret, label, hashValue, length, algorithm): ...
def derive_secret(secret, label, handshake_hashes, algorithm): ...
def bytesToNumber(b, endian: str = "big"): ...
def numberToByteArray(
    n, howManyBytes: Incomplete | None = None, endian: str = "big"
): ...
def mpiToNumber(mpi): ...
def numberToMPI(n): ...

numBits = bit_length
numBytes = byte_length

def getRandomNumber(low, high): ...
def gcd(a, b): ...
def lcm(a, b): ...
def invMod(a, b): ...
def powMod(base, power, modulus): ...

powMod = pow

def divceil(divident, divisor): ...
def makeSieve(n): ...
def isPrime(n, iterations: int = 5, display: bool = False, sieve=...): ...
def getRandomPrime(bits, display: bool = False): ...
def getRandomSafePrime(bits, display: bool = False): ...
