from .utils.compat import *
from .utils.cryptomath import *
from .constants import CipherSuite as CipherSuite
from .utils.deprecations import deprecated_method as deprecated_method
from _typeshed import Incomplete

FFDHE_PARAMETERS: Incomplete
RFC2409_GROUP1: Incomplete
RFC2409_GROUP2: Incomplete
RFC3526_GROUP5: Incomplete
RFC3526_GROUP14: Incomplete
RFC3526_GROUP15: Incomplete
RFC3526_GROUP16: Incomplete
RFC3526_GROUP17: Incomplete
RFC3526_GROUP18: Incomplete
goodGroupParameters: Incomplete
RFC5114_GROUP22: Incomplete
RFC5114_GROUP23: Incomplete
RFC5114_GROUP24: Incomplete
RFC7919_GROUPS: Incomplete
FFDHE2048: Incomplete
FFDHE3072: Incomplete
FFDHE4096: Incomplete
FFDHE6144: Incomplete
FFDHE8192: Incomplete

def paramStrength(param): ...
def P_hash(mac_name, secret, seed, length): ...
def PRF(secret, label, seed, length): ...
def PRF_1_2(secret, label, seed, length): ...
def PRF_1_2_SHA384(secret, label, seed, length): ...
def PRF_SSL(secret, seed, length): ...
def calcExtendedMasterSecret(
    version, cipherSuite, premasterSecret, handshakeHashes
): ...
def calcMasterSecret(
    version, cipherSuite, premasterSecret, clientRandom, serverRandom
): ...
def calcFinished(version, masterSecret, cipherSuite, handshakeHashes, isClient): ...
def calc_key(
    version,
    secret,
    cipher_suite,
    label,
    handshake_hashes: Incomplete | None = None,
    client_random: Incomplete | None = None,
    server_random: Incomplete | None = None,
    output_length: Incomplete | None = None,
): ...
def makeX(salt, username, password): ...
def makeVerifier(username, password, bits): ...
def PAD(n, x): ...
def makeU(N, A, B): ...
def makeK(N, g): ...
def createHMAC(k, digestmod=...): ...
def createMAC_SSL(k, digestmod: Incomplete | None = None): ...

class MAC_SSL:
    digestmod: Incomplete
    block_size: Incomplete
    digest_size: Incomplete
    ohash: Incomplete
    ihash: Incomplete
    def create(self, k, digestmod: Incomplete | None = None) -> None: ...
    def update(self, m) -> None: ...
    def copy(self): ...
    def digest(self): ...
