import socket
from .constants import AlertDescription as AlertDescription, AlertLevel as AlertLevel
from _typeshed import Incomplete

class BaseTLSException(Exception): ...
class EncryptionError(BaseTLSException): ...
class TLSError(BaseTLSException): ...
class TLSClosedConnectionError(TLSError, socket.error): ...
class TLSAbruptCloseError(TLSError): ...
class TLSAlert(TLSError): ...

class TLSLocalAlert(TLSAlert):
    description: Incomplete
    level: Incomplete
    message: Incomplete
    def __init__(self, alert, message: Incomplete | None = None) -> None: ...

class TLSRemoteAlert(TLSAlert):
    description: Incomplete
    level: Incomplete
    def __init__(self, alert) -> None: ...

class TLSAuthenticationError(TLSError): ...
class TLSNoAuthenticationError(TLSAuthenticationError): ...
class TLSAuthenticationTypeError(TLSAuthenticationError): ...
class TLSFingerprintError(TLSAuthenticationError): ...
class TLSAuthorizationError(TLSAuthenticationError): ...

class TLSValidationError(TLSAuthenticationError):
    info: Incomplete
    def __init__(self, msg, info: Incomplete | None = None) -> None: ...

class TLSFaultError(TLSError): ...
class TLSUnsupportedError(TLSError): ...
class TLSInternalError(TLSError): ...
class TLSProtocolException(BaseTLSException): ...
class TLSIllegalParameterException(TLSProtocolException): ...
class TLSDecodeError(TLSProtocolException): ...
class TLSUnexpectedMessage(TLSProtocolException): ...
class TLSRecordOverflow(TLSProtocolException): ...
class TLSDecryptionFailed(TLSProtocolException): ...
class TLSBadRecordMAC(TLSProtocolException): ...
class TLSInsufficientSecurity(TLSProtocolException): ...
class TLSUnknownPSKIdentity(TLSProtocolException): ...
class TLSHandshakeFailure(TLSProtocolException): ...
class MaskTooLongError(EncryptionError): ...
class MessageTooLongError(EncryptionError): ...
class EncodingError(EncryptionError): ...
class InvalidSignature(EncryptionError): ...
class UnknownRSAType(EncryptionError): ...
