from .utils.compat import *
from .utils.cryptomath import *
from .errors import *
from .utils.codec import *
from .constants import *
from .utils.tackwrapper import *
from .extensions import *
from .utils.compression import compression_algo_impls as compression_algo_impls
from .utils.deprecations import (
    deprecated_attrs as deprecated_attrs,
    deprecated_params as deprecated_params,
)
from .utils.format_output import none_as_unknown as none_as_unknown
from .x509 import X509 as X509
from .x509certchain import X509CertChain as X509CertChain
from _typeshed import Incomplete

class RecordHeader:
    type: int
    version: Incomplete
    length: int
    ssl2: Incomplete
    def __init__(self, ssl2) -> None: ...

class RecordHeader3(RecordHeader):
    def __init__(self) -> None: ...
    type: Incomplete
    version: Incomplete
    length: Incomplete
    def create(self, version, type, length): ...
    def write(self): ...
    ssl2: bool
    def parse(self, parser): ...
    @property
    def typeName(self): ...

class RecordHeader2(RecordHeader):
    padding: int
    securityEscape: bool
    def __init__(self) -> None: ...
    length: Incomplete
    type: Incomplete
    version: Incomplete
    def parse(self, parser): ...
    def create(self, length, padding: int = 0, securityEscape: bool = False): ...
    def write(self): ...

class Message:
    contentType: Incomplete
    data: Incomplete
    def __init__(self, contentType, data) -> None: ...
    def write(self): ...

class Alert:
    contentType: Incomplete
    level: int
    description: int
    def __init__(self) -> None: ...
    def create(self, description, level=...): ...
    def parse(self, p): ...
    def write(self): ...
    @property
    def levelName(self): ...
    @property
    def descriptionName(self): ...

class HandshakeMsg:
    contentType: Incomplete
    handshakeType: Incomplete
    def __init__(self, handshakeType) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def postWrite(self, w): ...

class HelloMessage(HandshakeMsg):
    extensions: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def getExtension(self, extType): ...
    def addExtension(self, ext) -> None: ...

class ClientHello(HelloMessage):
    ssl2: Incomplete
    client_version: Incomplete
    random: Incomplete
    session_id: Incomplete
    cipher_suites: Incomplete
    compression_methods: Incomplete
    def __init__(self, ssl2: bool = False) -> None: ...
    @property
    def certificate_types(self): ...
    @certificate_types.setter
    def certificate_types(self, val) -> None: ...
    @property
    def srp_username(self): ...
    @srp_username.setter
    def srp_username(self, name) -> None: ...
    @property
    def tack(self): ...
    @tack.setter
    def tack(self, present) -> None: ...
    @property
    def supports_npn(self): ...
    @supports_npn.setter
    def supports_npn(self, present) -> None: ...
    @property
    def server_name(self): ...
    @server_name.setter
    def server_name(self, hostname) -> None: ...
    extensions: Incomplete
    def create(
        self,
        version,
        random,
        session_id,
        cipher_suites,
        certificate_types: Incomplete | None = None,
        srpUsername: Incomplete | None = None,
        tack: bool = False,
        supports_npn: Incomplete | None = None,
        serverName: Incomplete | None = None,
        extensions: Incomplete | None = None,
    ): ...
    def parse(self, p): ...
    def psk_truncate(self): ...
    def write(self): ...

class HelloRequest(HandshakeMsg):
    def __init__(self) -> None: ...
    def create(self): ...
    def write(self): ...
    def parse(self, parser): ...

class ServerHello(HelloMessage):
    server_version: Incomplete
    random: Incomplete
    session_id: Incomplete
    cipher_suite: int
    compression_method: int
    def __init__(self) -> None: ...
    @property
    def tackExt(self): ...
    extensions: Incomplete
    @tackExt.setter
    def tackExt(self, val) -> None: ...
    @property
    def certificate_type(self): ...
    @certificate_type.setter
    def certificate_type(self, val) -> None: ...
    @property
    def next_protos(self): ...
    @next_protos.setter
    def next_protos(self, val) -> None: ...
    @property
    def next_protos_advertised(self): ...
    @next_protos_advertised.setter
    def next_protos_advertised(self, val) -> None: ...
    def create(
        self,
        version,
        random,
        session_id,
        cipher_suite,
        certificate_type: Incomplete | None = None,
        tackExt: Incomplete | None = None,
        next_protos_advertised: Incomplete | None = None,
        extensions: Incomplete | None = None,
    ): ...
    def parse(self, p): ...
    def write(self): ...

class ServerHello2(HandshakeMsg):
    session_id_hit: int
    certificate_type: int
    server_version: Incomplete
    certificate: Incomplete
    ciphers: Incomplete
    session_id: Incomplete
    def __init__(self) -> None: ...
    def create(
        self,
        session_id_hit,
        certificate_type,
        server_version,
        certificate,
        ciphers,
        session_id,
    ): ...
    def write(self): ...
    def parse(self, parser): ...

class CertificateEntry:
    certificateType: Incomplete
    certificate: Incomplete
    extensions: Incomplete
    def __init__(self, certificateType) -> None: ...
    def create(self, certificate, extensions): ...
    def write(self): ...
    def parse(self, parser): ...

class Certificate(HandshakeMsg):
    certificateType: Incomplete
    version: Incomplete
    certificate_list: Incomplete
    certificate_request_context: Incomplete
    def __init__(self, certificateType, version=(3, 2)) -> None: ...
    @property
    def cert_chain(self): ...
    @cert_chain.setter
    def cert_chain(self, cert_chain) -> None: ...
    def create(self, cert_chain, context: bytes = b""): ...
    def parse(self, p): ...
    def write(self): ...

class CertificateRequest(HelloMessage):
    certificate_types: Incomplete
    certificate_authorities: Incomplete
    version: Incomplete
    certificate_request_context: bytes
    extensions: Incomplete
    def __init__(self, version) -> None: ...
    @property
    def supported_signature_algs(self): ...
    @supported_signature_algs.setter
    def supported_signature_algs(self, val) -> None: ...
    def create(
        self,
        certificate_types: Incomplete | None = None,
        certificate_authorities: Incomplete | None = None,
        sig_algs: Incomplete | None = None,
        context: bytes = b"",
        extensions: Incomplete | None = None,
    ): ...
    def parse(self, parser): ...
    def write(self): ...

class ServerKeyExchange(HandshakeMsg):
    cipherSuite: Incomplete
    version: Incomplete
    srp_N: int
    srp_N_len: Incomplete
    srp_g: int
    srp_g_len: Incomplete
    srp_s: Incomplete
    srp_B: int
    srp_B_len: Incomplete
    dh_p: int
    dh_p_len: Incomplete
    dh_g: int
    dh_g_len: Incomplete
    dh_Ys: int
    dh_Ys_len: Incomplete
    curve_type: Incomplete
    named_curve: Incomplete
    ecdh_Ys: Incomplete
    signature: Incomplete
    hashAlg: int
    signAlg: int
    def __init__(self, cipherSuite, version) -> None: ...
    def createSRP(self, srp_N, srp_g, srp_s, srp_B): ...
    def createDH(self, dh_p, dh_g, dh_Ys): ...
    def createECDH(
        self,
        curve_type,
        named_curve: Incomplete | None = None,
        point: Incomplete | None = None,
    ): ...
    def parse(self, parser): ...
    def writeParams(self): ...
    def write(self): ...
    def hash(self, clientRandom, serverRandom): ...

class ServerHelloDone(HandshakeMsg):
    def __init__(self) -> None: ...
    def create(self): ...
    def parse(self, p): ...
    def write(self): ...

class ClientKeyExchange(HandshakeMsg):
    cipherSuite: Incomplete
    version: Incomplete
    srp_A: int
    dh_Yc: int
    ecdh_Yc: Incomplete
    encryptedPreMasterSecret: Incomplete
    def __init__(self, cipherSuite, version: Incomplete | None = None) -> None: ...
    def createSRP(self, srp_A): ...
    def createRSA(self, encryptedPreMasterSecret): ...
    def createDH(self, dh_Yc): ...
    def createECDH(self, ecdh_Yc): ...
    def parse(self, parser): ...
    def write(self): ...

class ClientMasterKey(HandshakeMsg):
    cipher: int
    clear_key: Incomplete
    encrypted_key: Incomplete
    key_argument: Incomplete
    def __init__(self) -> None: ...
    def create(self, cipher, clear_key, encrypted_key, key_argument): ...
    def write(self): ...
    def parse(self, parser): ...

class CertificateVerify(HandshakeMsg):
    version: Incomplete
    signatureAlgorithm: Incomplete
    signature: Incomplete
    def __init__(self, version) -> None: ...
    def create(self, signature, signatureAlgorithm: Incomplete | None = None): ...
    def parse(self, parser): ...
    def write(self): ...

class ChangeCipherSpec:
    contentType: Incomplete
    type: int
    def __init__(self) -> None: ...
    def create(self): ...
    def parse(self, p): ...
    def write(self): ...

class NextProtocol(HandshakeMsg):
    next_proto: Incomplete
    def __init__(self) -> None: ...
    def create(self, next_proto): ...
    def parse(self, p): ...
    def write(self, trial: bool = False): ...

class Finished(HandshakeMsg):
    version: Incomplete
    verify_data: Incomplete
    hash_length: Incomplete
    def __init__(self, version, hash_length: Incomplete | None = None) -> None: ...
    def create(self, verify_data): ...
    def parse(self, p): ...
    def write(self): ...

class EncryptedExtensions(HelloMessage):
    def __init__(self) -> None: ...
    extensions: Incomplete
    def create(self, extensions): ...
    def parse(self, parser): ...
    def write(self): ...

class NewSessionTicket(HelloMessage):
    ticket_lifetime: int
    ticket_age_add: int
    ticket_nonce: Incomplete
    ticket: Incomplete
    extensions: Incomplete
    time: Incomplete
    def __init__(self) -> None: ...
    def create(
        self, ticket_lifetime, ticket_age_add, ticket_nonce, ticket, extensions
    ): ...
    def write(self): ...
    def parse(self, parser): ...

class NewSessionTicket1_0(HelloMessage):
    ticket_lifetime: int
    ticket: Incomplete
    def __init__(self) -> None: ...
    def create(self, ticket_lifetime, ticket): ...
    def write(self): ...
    def parse(self, parser): ...

class SessionTicketPayload:
    version: int
    master_secret: Incomplete
    protocol_version: Incomplete
    cipher_suite: int
    creation_time: int
    nonce: Incomplete
    encrypt_then_mac: bool
    extended_master_secret: bool
    server_name: Incomplete
    def __init__(self) -> None: ...
    @property
    def client_cert_chain(self): ...
    @client_cert_chain.setter
    def client_cert_chain(self, client_cert_chain) -> None: ...
    def create(
        self,
        master_secret,
        protocol_version,
        cipher_suite,
        creation_time,
        nonce=...,
        client_cert_chain: Incomplete | None = None,
        encrypt_then_mac: bool = False,
        extended_master_secret: bool = False,
        server_name=...,
    ): ...
    def parse(self, parser): ...
    def write(self): ...

class SSL2Finished(HandshakeMsg):
    verify_data: Incomplete
    def __init__(self, msg_type) -> None: ...
    def create(self, verify_data): ...
    def parse(self, parser): ...
    def write(self): ...

class ClientFinished(SSL2Finished):
    def __init__(self) -> None: ...

class ServerFinished(SSL2Finished):
    def __init__(self) -> None: ...

class CertificateStatus(HandshakeMsg):
    status_type: Incomplete
    ocsp: Incomplete
    def __init__(self) -> None: ...
    def create(self, status_type, ocsp): ...
    def parse(self, parser): ...
    def write(self): ...

class ApplicationData:
    contentType: Incomplete
    bytes: Incomplete
    def __init__(self) -> None: ...
    def create(self, bytes): ...
    def splitFirstByte(self): ...
    def parse(self, p): ...
    def write(self): ...

class Heartbeat:
    contentType: Incomplete
    message_type: int
    payload: Incomplete
    padding: Incomplete
    def __init__(self) -> None: ...
    def create(self, message_type, payload, padding_length): ...
    def create_response(self): ...
    def parse(self, p): ...
    def write(self): ...

class KeyUpdate(HandshakeMsg):
    message_type: int
    def __init__(self) -> None: ...
    def create(self, message_type): ...
    def parse(self, p): ...
    def write(self): ...

class CompressedCertificate(Certificate):
    handshakeType: Incomplete
    compression_algo: Incomplete
    def __init__(self, certificateType, version=(3, 4)) -> None: ...
    def create(self, compression_algo, cert_chain, context: bytes = b""): ...
    def parse(self, p): ...
    def write(self): ...
