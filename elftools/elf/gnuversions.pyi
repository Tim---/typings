from ..common.utils import elf_assert as elf_assert, struct_parse as struct_parse
from ..construct import CString as CString
from .sections import Section as Section, Symbol as Symbol
from _typeshed import Incomplete
from collections.abc import Generator

class Version:
    entry: Incomplete
    name: Incomplete
    def __init__(self, entry, name: Incomplete | None = None) -> None: ...
    def __getitem__(self, name): ...

class VersionAuxiliary:
    entry: Incomplete
    name: Incomplete
    def __init__(self, entry, name) -> None: ...
    def __getitem__(self, name): ...

class GNUVersionSection(Section):
    stringtable: Incomplete
    field_prefix: Incomplete
    version_struct: Incomplete
    version_auxiliaries_struct: Incomplete
    def __init__(
        self,
        header,
        name,
        elffile,
        stringtable,
        field_prefix,
        version_struct,
        version_auxiliaries_struct,
    ) -> None: ...
    def num_versions(self): ...
    def iter_versions(self) -> Generator[Incomplete, None, None]: ...

class GNUVerNeedSection(GNUVersionSection):
    def __init__(self, header, name, elffile, stringtable) -> None: ...
    def has_indexes(self): ...
    def iter_versions(self) -> Generator[Incomplete, None, None]: ...
    def get_version(self, index): ...

class GNUVerDefSection(GNUVersionSection):
    def __init__(self, header, name, elffile, stringtable) -> None: ...
    def get_version(self, index): ...

class GNUVerSymSection(Section):
    symboltable: Incomplete
    def __init__(self, header, name, elffile, symboltable) -> None: ...
    def num_symbols(self): ...
    def get_symbol(self, n): ...
    def iter_symbols(self) -> Generator[Incomplete, None, None]: ...
