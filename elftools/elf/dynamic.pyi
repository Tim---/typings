from ..common.exceptions import ELFError as ELFError
from ..common.utils import (
    elf_assert as elf_assert,
    parse_cstring_from_stream as parse_cstring_from_stream,
    struct_parse as struct_parse,
)
from .enums import ENUM_D_TAG as ENUM_D_TAG
from .hash import ELFHashTable as ELFHashTable, GNUHashTable as GNUHashTable
from .relocation import (
    RelocationTable as RelocationTable,
    RelrRelocationTable as RelrRelocationTable,
)
from .sections import Section as Section, Symbol as Symbol
from .segments import Segment as Segment
from _typeshed import Incomplete
from collections.abc import Generator

class _DynamicStringTable:
    def __init__(self, stream, table_offset) -> None: ...
    def get_string(self, offset): ...

class DynamicTag:
    entry: Incomplete
    def __init__(self, entry, stringtable) -> None: ...
    def __getitem__(self, name): ...

class Dynamic:
    elffile: Incomplete
    elfstructs: Incomplete
    def __init__(self, stream, elffile, stringtable, position, empty) -> None: ...
    def get_table_offset(self, tag_name): ...
    def iter_tags(
        self, type: Incomplete | None = None
    ) -> Generator[Incomplete, None, None]: ...
    def get_tag(self, n): ...
    def num_tags(self): ...
    def get_relocation_tables(self): ...

class DynamicSection(Section, Dynamic):
    def __init__(self, header, name, elffile) -> None: ...

class DynamicSegment(Segment, Dynamic):
    def __init__(self, header, stream, elffile) -> None: ...
    def num_symbols(self): ...
    def get_symbol(self, index): ...
    def get_symbol_by_name(self, name): ...
    def iter_symbols(self) -> Generator[Incomplete, None, None]: ...
